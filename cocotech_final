index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COCO Bank Login</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="login-page">
        <h2>Welcome to COCO Bank</h2>
        <p>Please enter your login credentials</p>

        <label for="username">Username:</label>
        <input type="text" id="username" placeholder="Enter your username">

        <label for="iriscolor">Iris Color:</label>
        <input type="text" id="iriscolor" placeholder="Enter your iris color">

        <label for="birthplace">Birthplace:</label>
        <input type="text" id="birthplace" placeholder="Enter your birthplace">

        <button onclick="verifyLogin()">Submit</button>
    </div>

    <div id="notification" class="notification">
        Push Notification: Click here to approve login!
    </div>

    <div id="pattern-page" style="display: none;">
        <h3>Draw password pattern </h3>
        <canvas id="patternCanvas" width="400" height="400"></canvas>
        <button id="submitPattern" onclick="submitPattern()">Submit</button>
    </div>

    <div id="result-message"></div>

    <div id="timer" class="timer" style="display: none;">30s</div>

    <script src="script.js"></script>
</body>
</html>



script.js

let isDrawing = false;
let points = [];
let attemptCount = 0;
let maxAttempts = 2;
let lockTimeout = false;
let countdownTime = 30;
let countdownInterval;
const ANGLE_TOLERANCE = 10;  // Allowable deviation for angle in degrees
const DISTANCE_TOLERANCE = 0.2;  // Allowable deviation for side lengths (20%)
const CIRCLE_TOLERANCE = 0.3;  // Allowable deviation for circularity

// Simulate the login verification process (same as previous logic)
function verifyLogin() {
    const username = document.getElementById("username").value;
    const irisColor = document.getElementById("iriscolor").value;
    const birthplace = document.getElementById("birthplace").value;

    if (username === "user1" && irisColor === "blue" && birthplace === "pune") {
        document.getElementById("notification").style.display = "block";  // Show notification
    } else {
        alert("Incorrect credentials. Please try again.");
    }
}

// Handle notification click to proceed to pattern page
document.getElementById("notification").addEventListener("click", function() {
    this.style.display = "none";  // Hide notification
    document.getElementById("pattern-page").style.display = "block";  // Show pattern drawing page
    initPatternDrawing();  // Initialize drawing
});

// Initialize pattern drawing
function initPatternDrawing() {
    const canvas = document.getElementById("patternCanvas");
    const ctx = canvas.getContext("2d");

    canvas.addEventListener("mousedown", () => {
        if (attemptCount < maxAttempts && !lockTimeout) {
            isDrawing = true;
            points = [];
            ctx.clearRect(0, 0, canvas.width, canvas.height);  // Clear previous drawings
        }
    });

    canvas.addEventListener("mousemove", (event) => {
        if (isDrawing) {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            points.push({ x, y });
            drawCircle(ctx, x, y);
        }
    });

    canvas.addEventListener("mouseup", () => {
        isDrawing = false;
    });
}

// Draw circles on the canvas where the mouse moves
function drawCircle(ctx, x, y) {
    ctx.beginPath();
    ctx.arc(x, y, 5, 0, Math.PI * 2);
    ctx.fillStyle = 'black';
    ctx.fill();
}

// Submit the drawn pattern for validation
function submitPattern() {
    if (lockTimeout) {
        alert("System is locked. Please wait.");
        return;
    }

    const patternType = detectPattern(points);

    if (patternType === "square" || patternType === "rectangle" || patternType === "triangle" || patternType === "circle") {
        document.getElementById("result-message").textContent = "Pattern recognized, Access granted!";
        document.getElementById("result-message").style.color = "green";
        attemptCount = 0;  // Reset attempts on success
    } else {
        attemptCount++;
        if (attemptCount < maxAttempts) {
            document.getElementById("result-message").textContent = "Pattern incorrect, please try again!";
            document.getElementById("result-message").style.color = "red";
        } else {
            document.getElementById("result-message").textContent = "Access denied, please try again later!";
            document.getElementById("result-message").style.color = "red";
            lockSystem();  // Lock system for 30 seconds after two failed attempts
        }
    }
}

// Pattern recognition logic
function detectPattern(points) {
    if (points.length < 3) return "none";  // Too few points to form a pattern

    if (isSquare(points)) return "square";
    if (isRectangle(points)) return "rectangle";
    if (isTriangle(points)) return "triangle";
    if (isCircle(points)) return "circle";

    return "none";
}

// Check if the drawn pattern is a square
function isSquare(points) {
    if (points.length < 4) return false;

    const sides = getSideLengths(points);
    const angles = getAngles(points);

    const isEqualSides = sides.every((side, _, arr) => Math.abs(side - arr[0]) < arr[0] * DISTANCE_TOLERANCE);
    const isRightAngles = angles.every(angle => Math.abs(angle - 90) < ANGLE_TOLERANCE);

    return isEqualSides && isRightAngles;
}

// Check if the drawn pattern is a rectangle
function isRectangle(points) {
    if (points.length < 4) return false;

    const sides = getSideLengths(points);
    const angles = getAngles(points);

    // Rectangles have opposite sides equal and 90 degree angles
    const isOppositeSidesEqual = Math.abs(sides[0] - sides[2]) < sides[0] * DISTANCE_TOLERANCE &&
                                 Math.abs(sides[1] - sides[3]) < sides[1] * DISTANCE_TOLERANCE;
    const isRightAngles = angles.every(angle => Math.abs(angle - 90) < ANGLE_TOLERANCE);

    return isOppositeSidesEqual && isRightAngles;
}

// Check if the drawn pattern is a triangle
function isTriangle(points) {
    if (points.length < 3) return false;

    const angles = getAngles(points);
    const sumOfAngles = angles.reduce((sum, angle) => sum + angle, 0);

    return Math.abs(sumOfAngles - 180) < ANGLE_TOLERANCE;  // Sum of angles in a triangle is 180 degrees
}

// Check if the drawn pattern is a circle
function isCircle(points) {
    const center = getCenter(points);
    const radii = points.map(p => distance(p, center));

    const averageRadius = radii.reduce((sum, r) => sum + r, 0) / radii.length;
    const radiusTolerance = averageRadius * CIRCLE_TOLERANCE;

    return radii.every(r => Math.abs(r - averageRadius) < radiusTolerance);
}

// Get the lengths of the sides of the drawn pattern
function getSideLengths(points) {
    const sideLengths = [];

    for (let i = 0; i < points.length - 1; i++) {
        sideLengths.push(distance(points[i], points[i + 1]));
    }

    // Close the shape (last point to first point)
    sideLengths.push(distance(points[points.length - 1], points[0]));

    return sideLengths;
}

// Get the angles between consecutive sides
function getAngles(points) {
    const angles = [];

    for (let i = 0; i < points.length; i++) {
        const prev = points[i === 0 ? points.length - 1 : i - 1];
        const curr = points[i];
        const next = points[i === points.length - 1 ? 0 : i + 1];

        const angle = getAngle(prev, curr, next);
        angles.push(angle);
    }

    return angles;
}

// Calculate distance between two points
function distance(p1, p2) {
    return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);
}

// Calculate the angle between three points (using the law of cosines)
function getAngle(p1, p2, p3) {
    const a = distance(p2, p3);
    const b = distance(p1, p3);
    const c = distance(p1, p2);

    const cosTheta = (b * b + c * c - a * a) / (2 * b * c);
    const angle = Math.acos(cosTheta) * (180 / Math.PI);  // Convert to degrees

    return angle;
}

// Get the center of a set of points (average x and y coordinates)
function getCenter(points) {
    const sum = points.reduce((acc, p) => ({ x: acc.x + p.x, y: acc.y + p.y }), { x: 0, y: 0 });
    return { x: sum.x / points.length, y: sum.y / points.length };
}

// Lock the system for 30 seconds and show a countdown timer
function lockSystem() {
    lockTimeout = true;
    document.getElementById("timer").style.display = "block";
    countdownTime = 30;
    document.getElementById("timer").textContent = countdownTime + "s";

    countdownInterval = setInterval(() => {
        countdownTime--;
        document.getElementById("timer").textContent = countdownTime + "s";

        if (countdownTime <= 0) {
            clearInterval(countdownInterval);
            document.getElementById("timer").style.display = "none";
            resetLoginPage();  // Reset the page after the countdown
        }
    }, 1000);
}

// Reset the login page after the countdown
function resetLoginPage() {
    document.getElementById("login-page").style.display = "block";
    document.getElementById("pattern-page").style.display = "none";
    document.getElementById("result-message").textContent = "";
    attemptCount = 0;
    lockTimeout = false;
}

server.cpp

#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <chrono>
#include <thread>
#include <httplib.h>
#include <nlohmann/json.hpp>

using json = nlohmann::json;
using namespace std::chrono;
// User class to handle login credentials
class User {
private:
    std::string username;
    std::string irisColor;
    std::string birthplace;

public:
    User(std::string uname, std::string iris, std::string place)
        : username(uname), irisColor(iris), birthplace(place) {}

    // Function to verify login credentials
    bool verifyLogin(const std::string& uname, const std::string& iris, const std::string& place) {
        return (uname == username && iris == irisColor && place == birthplace);
    }
};

// Global default user
User defaultUser("user1", "blue", "pune");
struct Point {
    double x, y;
};

class PatternVerifier {
public:
    // Function to check if the given pattern forms a square
    static bool isSquare(const std::vector<Point>& points) {
        if (points.size() != 4) return false;  // Must be 4 points

        double d1 = distance(points[0], points[1]);
        double d2 = distance(points[1], points[2]);
        double d3 = distance(points[2], points[3]);
        double d4 = distance(points[3], points[0]);

        bool equalSides = isEqual(d1, d2) && isEqual(d2, d3) && isEqual(d3, d4);

        double angle1 = angle(points[0], points[1], points[2]);
        double angle2 = angle(points[1], points[2], points[3]);
        double angle3 = angle(points[2], points[3], points[0]);
        double angle4 = angle(points[3], points[0], points[1]);

        bool rightAngles = isRightAngle(angle1) && isRightAngle(angle2) &&
                           isRightAngle(angle3) && isRightAngle(angle4);

        return equalSides && rightAngles;
    }

private:
    static double distance(const Point& p1, const Point& p2) {
        return std::sqrt(std::pow(p2.x - p1.x, 2) + std::pow(p2.y - p1.y, 2));
    }

    static bool isEqual(double a, double b, double tolerance = 0.1) {
        return std::abs(a - b) < tolerance;
    }

    static double angle(const Point& p1, const Point& p2, const Point& p3) {
        double dx1 = p2.x - p1.x;
        double dy1 = p2.y - p1.y;
        double dx2 = p3.x - p2.x;
        double dy2 = p3.y - p2.y;
        double dot = dx1 * dx2 + dy1 * dy2;
        double mag1 = std::sqrt(dx1 * dx1 + dy1 * dy1);
        double mag2 = std::sqrt(dx2 * dx2 + dy2 * dy2);
        return std::acos(dot / (mag1 * mag2)) * 180.0 / M_PI;
    }

    static bool isRightAngle(double angle, double tolerance = 10.0) {
        return std::abs(angle - 90.0) < tolerance;
    }
};
class LockManager {
private:
    int failedAttempts;
    bool isLocked;
    steady_clock::time_point lockStart;

public:
    LockManager() : failedAttempts(0), isLocked(false) {}

    void incrementFailures() {
        failedAttempts++;
        if (failedAttempts >= 2) {
            isLocked = true;
            lockStart = steady_clock::now();
        }
    }

    bool checkLock() {
        if (!isLocked) return false;

        auto now = steady_clock::now();
        auto duration = duration_cast<seconds>(now - lockStart).count();

        if (duration >= 30) {
            isLocked = false;
            failedAttempts = 0;
        }
        return isLocked;
    }

    int getLockTimeRemaining() {
        auto now = steady_clock::now();
        auto duration = duration_cast<seconds>(now - lockStart).count();
        return 30 - static_cast<int>(duration);
    }
};

// Global lock manager instance
LockManager lockManager;
void handleLogin(const httplib::Request& req, httplib::Response& res) {
    if (lockManager.checkLock()) {
        json response = { {"status", "fail"}, {"message", "System locked. Please wait " + std::to_string(lockManager.getLockTimeRemaining()) + " seconds."} };
        res.set_content(response.dump(), "application/json");
        return;
    }

    // Parse request JSON
    json request = json::parse(req.body);
    std::string uname = request["username"];
    std::string iris = request["irisColor"];
    std::string place = request["birthplace"];

    // Verify login
    if (defaultUser.verifyLogin(uname, iris, place)) {
        json response = { {"status", "success"}, {"message", "Login approved"} };
        res.set_content(response.dump(), "application/json");
    } else {
        lockManager.incrementFailures();
        json response = { {"status", "fail"}, {"message", "Invalid credentials"} };
        res.set_content(response.dump(), "application/json");
    }
}

void handlePatternVerification(const httplib::Request& req, httplib::Response& res) {
    if (lockManager.checkLock()) {
        json response = { {"status", "fail"}, {"message", "System locked. Please wait " + std::to_string(lockManager.getLockTimeRemaining()) + " seconds."} };
        res.set_content(response.dump(), "application/json");
        return;
    }

    // Parse request JSON
    json request = json::parse(req.body);
    std::vector<Point> points = request["pattern"].get<std::vector<Point>>();

    // Verify if the pattern is a square
    if (PatternVerifier::isSquare(points)) {
        json response = { {"status", "success"}, {"message", "Pattern verified"} };
        res.set_content(response.dump(), "application/json");
    } else {
        lockManager.incrementFailures();
        json response = { {"status", "fail"}, {"message", "Incorrect pattern"} };
        res.set_content(response.dump(), "application/json");
    }
}

int main() {
    httplib::Server svr;

    // Define routes
    svr.Post("/api/login", handleLogin);
    svr.Post("/api/pattern", handlePatternVerification);

    std::cout << "Server is running at http://localhost:8080" << std::endl;
    svr.listen("localhost", 8080);

    return 0;
}


sty.css

/* General Styles */
body {
    font-family: 'Arial', sans-serif;
    text-align: center;
    background: linear-gradient(135deg, #ff7f50, #ff69b4, #1e90ff, #32cd32);
    background-size: 400% 400%;
    animation: gradient 10s ease infinite;
    color: #333;
    margin: 0;
    padding: 0;
}

@keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

h2 {
    color: #fff;
    margin-top: 50px;
}

label {
    font-size: 16px;
    color: #fff;
}

input {
    padding: 10px;
    margin: 10px 0;
    width: 200px;
    border-radius: 5px;
    border: 2px solid #ccc;
}

button {
    padding: 10px 20px;
    background-color: #4caf50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

#notification {
    background-color: #f44336;
    color: white;
    padding: 15px;
    margin-top: 20px;
    display: none;
    cursor: pointer;
    border-radius: 5px;
}

#patternCanvas {
    border: 2px solid #ccc;
    margin-top: 20px;
}

#result-message {
    margin-top: 20px;
    font-weight: bold;
}

.timer {
    font-size: 20px;
    color: red;
    position: fixed;
    top: 20px;
    right: 20px;
    font-weight: bold;
}
